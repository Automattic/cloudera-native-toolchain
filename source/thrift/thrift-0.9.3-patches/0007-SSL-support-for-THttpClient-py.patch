From 2c4a71320f16e8228496327bcd35e834f7cd1927 Mon Sep 17 00:00:00 2001
From: Bharath Vissapragada <bharathv@cloudera.com>
Date: Tue, 25 Jun 2019 08:55:22 -0700
Subject: [PATCH] SSL support for THttpClient (py)

Selectively ports parts of THRIFT-3118 and THRIFT-1857. With this
patch, clients can pass an SSLContext for certificate verification.

Tested by building the toolchain locally and prototyping HTTP endpoint
support in impala-shell with this client.
---
 lib/py/src/transport/THttpClient.py | 37 +++++++++++++++++++----------
 1 file changed, 24 insertions(+), 13 deletions(-)

diff --git a/lib/py/src/transport/THttpClient.py b/lib/py/src/transport/THttpClient.py
index 5851fa2..46ce9c9 100644
--- a/lib/py/src/transport/THttpClient.py
+++ b/lib/py/src/transport/THttpClient.py
@@ -17,6 +17,7 @@
 # under the License.
 #
 
+from io import BytesIO
 import httplib
 import os
 import socket
@@ -25,25 +26,26 @@ import urllib
 import urlparse
 import warnings
 
-from cStringIO import StringIO
-
 from TTransport import *
 
 
 class THttpClient(TTransportBase):
   """Http implementation of TTransport base."""
 
-  def __init__(self, uri_or_host, port=None, path=None):
-    """THttpClient supports two different types constructor parameters.
+  def __init__(self, uri_or_host, port=None, path=None, cafile=None, cert_file=None, key_file=None, ssl_context=None):
+    """THttpClient supports two different types of constructors.
 
     THttpClient(host, port, path) - deprecated
-    THttpClient(uri)
+    THttpClient(uri, [port=<n>, path=<s>, cafile=<filename>, cert_file=<filename>, key_file=<filename>, ssl_context=<context>])
 
-    Only the second supports https.
+    Only the second supports https.  To properly authenticate against the server,
+    provide the client's identity by specifying cert_file and key_file.  To properly authenticate the server,
+    specify either cafile or ssl_context with a CA defined.
+    NOTE: if both cafile and ssl_context are defined, ssl_context will override cafile.
     """
     if port is not None:
       warnings.warn(
-        "Please use the THttpClient('http://host:port/path') syntax",
+        "Please use the THttpClient('http{s}://host:port/path') constructor",
         DeprecationWarning,
         stacklevel=2)
       self.host = uri_or_host
@@ -59,24 +61,30 @@ class THttpClient(TTransportBase):
         self.port = parsed.port or httplib.HTTP_PORT
       elif self.scheme == 'https':
         self.port = parsed.port or httplib.HTTPS_PORT
+        self.certfile = cert_file
+        self.keyfile = key_file
+        self.context = ssl.create_default_context(cafile=cafile) if (cafile and not ssl_context) else ssl_context
       self.host = parsed.hostname
       self.path = parsed.path
       if parsed.query:
         self.path += '?%s' % parsed.query
-    self.__wbuf = StringIO()
+    self.__wbuf = BytesIO()
     self.__http = None
+    self.__http_response = None
     self.__timeout = None
     self.__custom_headers = None
 
   def open(self):
     if self.scheme == 'http':
-      self.__http = httplib.HTTP(self.host, self.port)
+      self.__http = httplib.HTTPConnection(self.host, self.port, timeout=self.__timeout)
     else:
-      self.__http = httplib.HTTPS(self.host, self.port)
+      self.__http = httplib.HTTPSConnection(self.host, self.port, key_file=self.keyfile,
+            cert_file=self.certfile, timeout=self.__timeout, context=self.context)
 
   def close(self):
     self.__http.close()
     self.__http = None
+    self.__http_response = None
 
   def isOpen(self):
     return self.__http is not None
@@ -94,7 +102,7 @@ class THttpClient(TTransportBase):
     self.__custom_headers = headers
 
   def read(self, sz):
-    return self.__http.file.read(sz)
+    return self.__http_response.read(sz)
 
   def write(self, buf):
     self.__wbuf.write(buf)
@@ -117,7 +125,7 @@ class THttpClient(TTransportBase):
 
     # Pull data out of buffer
     data = self.__wbuf.getvalue()
-    self.__wbuf = StringIO()
+    self.__wbuf = BytesIO()
 
     # HTTP request
     self.__http.putrequest('POST', self.path)
@@ -144,7 +152,10 @@ class THttpClient(TTransportBase):
     self.__http.send(data)
 
     # Get reply to flush the request
-    self.code, self.message, self.headers = self.__http.getreply()
+    self.__http_response = self.__http.getresponse()
+    self.code = self.__http_response.status
+    self.message = self.__http_response.reason
+    self.headers = self.__http_response.msg
 
   # Decorate if we know how to timeout
   if hasattr(socket, 'getdefaulttimeout'):
-- 
2.17.1

